# Generated by Django 5.0.4 on 2025-05-25 14:48

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Genre",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("tmdb_id", models.IntegerField(unique=True)),
                ("name", models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "profile_picture",
                    models.ImageField(blank=True, null=True, upload_to="profiles/"),
                ),
                (
                    "notification_preferences",
                    models.JSONField(blank=True, default=dict),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "favorite_genres",
                    models.ManyToManyField(blank=True, to="movies.genre"),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Movie",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("tmdb_id", models.IntegerField(unique=True)),
                ("title", models.CharField(max_length=255)),
                (
                    "original_title",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("overview", models.TextField(blank=True)),
                ("tagline", models.CharField(blank=True, max_length=255)),
                ("release_date", models.DateField(blank=True, null=True)),
                ("runtime", models.IntegerField(blank=True, null=True)),
                ("homepage", models.URLField(blank=True)),
                ("status", models.CharField(blank=True, max_length=50)),
                ("original_language", models.CharField(blank=True, max_length=10)),
                ("budget", models.BigIntegerField(blank=True, null=True)),
                ("revenue", models.BigIntegerField(blank=True, null=True)),
                ("popularity", models.FloatField(default=0.0)),
                ("vote_average", models.FloatField(default=0.0)),
                ("vote_count", models.IntegerField(default=0)),
                ("poster_path", models.CharField(blank=True, max_length=200)),
                ("backdrop_path", models.CharField(blank=True, max_length=200)),
                ("imdb_id", models.CharField(blank=True, max_length=20, null=True)),
                (
                    "facebook_id",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "instagram_id",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("twitter_id", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "genres",
                    models.ManyToManyField(related_name="movies", to="movies.genre"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TVShow",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("tmdb_id", models.IntegerField(unique=True)),
                ("name", models.CharField(max_length=255)),
                ("original_name", models.CharField(blank=True, max_length=255)),
                ("overview", models.TextField(blank=True)),
                ("first_air_date", models.DateField(blank=True, null=True)),
                ("last_air_date", models.DateField(blank=True, null=True)),
                (
                    "episode_run_time",
                    models.IntegerField(
                        blank=True, help_text="Ort. bölüm süresi (dakika)", null=True
                    ),
                ),
                ("number_of_seasons", models.IntegerField(default=0)),
                ("number_of_episodes", models.IntegerField(default=0)),
                ("homepage", models.URLField(blank=True)),
                ("status", models.CharField(blank=True, max_length=50)),
                ("original_language", models.CharField(blank=True, max_length=10)),
                ("popularity", models.FloatField(default=0.0)),
                ("vote_average", models.FloatField(default=0.0)),
                ("vote_count", models.IntegerField(default=0)),
                ("poster_path", models.CharField(blank=True, max_length=200)),
                ("backdrop_path", models.CharField(blank=True, max_length=200)),
                ("imdb_id", models.CharField(blank=True, max_length=20, null=True)),
                (
                    "facebook_id",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "instagram_id",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("twitter_id", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "genres",
                    models.ManyToManyField(related_name="tvshows", to="movies.genre"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="WatchHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("watched_at", models.DateTimeField(auto_now_add=True)),
                (
                    "duration_minutes",
                    models.PositiveIntegerField(help_text="İzlenen süre (dakika)"),
                ),
                (
                    "movie",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="movies.movie",
                    ),
                ),
                (
                    "tv_show",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="movies.tvshow",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="watch_history",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="WatchlistItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("added_at", models.DateTimeField(auto_now_add=True)),
                (
                    "movie",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="movies.movie",
                    ),
                ),
                (
                    "tv_show",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="movies.tvshow",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="watchlist",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
    ]
